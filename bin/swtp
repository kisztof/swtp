#!/bin/bash

# Declare two arrays to hold the PHP versions and their corresponding full versions
declare -a PHP_VERSIONS=()
declare -a FULL_VERSIONS=()

# Function to list installed PHP versions
list_installed_php_versions() {
    local i=1
    while read -r path; do
        full_version=$(basename "$path")
        major_minor_version=$(echo "$full_version" | awk -F '.' '{print $1 "." $2}')
        PHP_VERSIONS+=("$major_minor_version")
        FULL_VERSIONS+=("$full_version")
    done < <(find /opt/homebrew/Cellar/php* -type d -maxdepth 1 -mindepth 1 | awk -F '/' '{print $NF}' | sort -V)

    for index in "${!FULL_VERSIONS[@]}"; do
        full_version="${FULL_VERSIONS[$index]}"
        major_minor_version="${PHP_VERSIONS[$index]}"
        if [ "$major_minor_version" == "$CURRENT_PHP_VERSION" ]; then
            echo -e "\033[0;32m* [$i] $full_version\033[0m"
        else
            echo "* [$i] $full_version"
        fi
        i=$((i + 1))
    done
}

# Find the currently linked PHP version
CURRENT_PHP_VERSION=$(php -v | head -n 1 | awk -F " " '{print $2}' | awk -F "." '{print $1 "." $2}')
echo "Currently linked PHP version: $CURRENT_PHP_VERSION"

# Check if a version number is provided
if [ -z "$1" ]; then
    echo "Available PHP versions:"
    list_installed_php_versions
    read -p "Please choose a PHP version to switch to (enter the number): " choice
    PHP_VERSION="${PHP_VERSIONS[$((choice - 1))]}"
    if [ -z "$PHP_VERSION" ]; then
        echo "Invalid selection. Exiting."
        exit 1
    fi
else
    PHP_VERSION="$1"
fi

# Check if the requested version is the same as the current version
if [ "$CURRENT_PHP_VERSION" == "$PHP_VERSION" ]; then
    echo "The requested PHP version is already active."
    exit 0
fi

# Check if the requested PHP version is installed
if ! echo "${PHP_VERSIONS[@]}" | grep -q -w "$PHP_VERSION"; then
    read -p "PHP version $PHP_VERSION is not installed. Would you like to install it now? (y/n): " choice
    case "$choice" in
        y|Y ) 
            echo "Installing PHP version $PHP_VERSION..."
            brew install php@"$PHP_VERSION"
            ;;
        n|N ) 
            echo "Exiting."
            exit 1
            ;;
        * ) 
            echo "Invalid option. Exiting."
            exit 1
            ;;
    esac
fi

# Unlink the current PHP version
echo "Unlinking the current PHP version..."
brew unlink php &> /dev/null

# Link the new PHP version
echo "Linking PHP version $PHP_VERSION..."
if brew link php@"$PHP_VERSION" --force &> /dev/null; then
    echo "Switched to PHP version $PHP_VERSION."
    NEW_PHP_VERSION=$(php -v | head -n 1 | awk -F " " '{print $2}' | awk -F "." '{print $1 "." $2}')
    echo "You are now using PHP version: $NEW_PHP_VERSION"
else
    echo "Failed to switch to PHP version $PHP_VERSION."
    exit 1
fi

